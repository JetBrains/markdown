task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

task javadocJar(type: Jar) {
    from javadoc
    classifier "javadoc"
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "valich"
            name "Valentin Fondaratov"
            email "fondarat@gmail.com"
            organization "JetBrains"
            organizationUrl "https://jetbrains.com"
        }
    }

    scm {
        url "https://github.com/valich/intellij-markdown"
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'org.jetbrains'
            artifactId 'markdown'
            version "0.1.$buildNumber"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Markdown parser in Kotlin')
                root.appendNode('name', 'markdown')
                root.appendNode('url', 'https://github.com/valich/intellij-markdown')
                root.children().last() + pomConfig
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("SONATYPE_USER")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

signing {
    def signingKey = System.getenv("SIGN_KEY")
    def signingKeyPassphrase = System.getenv("SIGN_KEY_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingKeyPassphrase)
    sign publishing.publications.MyPublication
}
