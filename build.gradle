buildscript {
    ext.kotlin_version = '1.3.41'
    ext.buildNumber = '46'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    flatDir {
        dirs 'lib'
    }
    mavenCentral()
}

apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'signing'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testCompile name: 'idea_rt'
    testCompile 'junit:junit:4.12'

}

sourceSets {
    main.java.srcDirs = ['src']
    main.kotlin.srcDirs = ['src']
    test.java.srcDirs = ['test']
    test.kotlin.srcDirs = ['test']

    main.resources.srcDirs = []
}

javadoc {
}

test {
    useJUnit {
        excludeCategories 'org.intellij.markdown.ParserPerformanceTest'
    }
    testLogging {
        exceptionFormat = 'full'
    }
    outputs.upToDateWhen { false }
}

task performanceTest(type: Test, group: 'verification', dependsOn: [classes, testClasses]) {
    useJUnit {
        includeCategories 'org.intellij.markdown.ParserPerformanceTest'
    }
    testLogging {
        exceptionFormat = 'full'
    }
}

task downloadCommonmark(type: Exec) {
    onlyIf { !new File("CommonMark").exists() }
    executable 'git'
    args 'clone', 'https://github.com/jgm/CommonMark'
}

task testJar(type: Jar) {
    from sourceSets.test.output
    from sourceSets.main.output
    archiveName 'markdown-test.jar'
    manifest {
        attributes 'Main-Class': 'org.intellij.markdown.SpecRunner'
        attributes 'Class-Path': configurations.testRuntime.join(' ')
    }
}

task runSpec(type: Exec, group: 'verification', dependsOn: [downloadCommonmark, testJar]) {
    executable 'python3'
    workingDir 'CommonMark'
    args 'test/spec_tests.py', '-p', '../run_html_gen.sh'
}

jar {
    archiveName 'markdown.jar'
}

if (!System.getenv("SONATYPE_USER")?.isEmpty()) {
    apply from: "deploy.gradle"
}

sourceCompatibility=1.6
targetCompatibility=1.6